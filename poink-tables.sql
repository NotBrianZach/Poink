use poink;

/*possibly more efficient to split up into bids and questions?*/
/*have to prevent users from getting duplicate questions...keep track of all
question_id's they've seen and send it the server along with request for more ads
*/

CREATE TABLE QUESTIONS (
	QUESTION_ID INTEGER unsigned PRIMARY KEY,
	QUESTION VARCHAR(255) NOT NULL,
	MIN_AGE INTEGER unsigned NOT NULL,
	MAX_AGE INTEGER unsigned NOT NULL,
	COMPANY_ID INTEGER unsigned NOT NULL,
	TARGET_GENDERS INTEGER unsigned NOT NULL,
    DELETED BOOLEAN DEFAULT 0 NOT NULL/*also changes when ad campaign expires.*/
	)ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS TARGET_GENDERS (
	TARGET_GENDERS_ID INTEGER unsigned PRIMARY KEY,
	NAME VARCHAR(6) NOT NULL
	)ENGINE=InnoDB;

    /*
CREATE TABLE QUESTION_COORDS (
	QUESTION_COORD_ID INTEGER unsigned PRIMARY KEY,
	QUESTION_ID INTEGER unsigned NOT NULL DEFAULT 0,
	BUDGET FLOAT NOT NULL,
	BID FLOAT NOT NULL,
    END_DATE CHAR(16),
	LATLOWLEFT FLOAT NOT NULL,
	LNGLOWLEFT FLOAT NOT NULL,
    INDEX LOWLEFT (LATLOWLEFT, LNGLOWLEFT),
    LATHIRIGHT FLOAT NOT NULL,
    LNGHIRIGHT FLOAT NOT NULL,
    INDEX HIRIGHT (LATHIRIGHT, LNGHIRIGHT),
    VALID BOOLEAN DEFAULT 0 NOT NULL
	)ENGINE=InnoDB;
*/
CREATE TABLE IF NOT EXISTS QUESTION_COORDS (
	QUESTION_COORD_ID INTEGER unsigned PRIMARY KEY,
	QUESTION_ID INTEGER unsigned NOT NULL DEFAULT 0,
	BUDGET FLOAT NOT NULL,
	BID FLOAT NOT NULL,
    END_DATE CHAR(16),/*if null, no end date*/
	LAT FLOAT NOT NULL,
	LNG FLOAT NOT NULL,
	RADIUS FLOAT NOT NULL,
    VALID BOOLEAN DEFAULT 0 NOT NULL
	)ENGINE=InnoDB;

CREATE TABLE IF NOT EXISTS PAYMENTS (
    ID int(6) NOT NULL AUTO_INCREMENT PRIMARY KEY,
    TXNID varchar(20) NOT NULL,
    PAYMENT_AMOUNT decimal(7,2) NOT NULL,
    PAYMENT_STATUS varchar(25) NOT NULL,
    ITEMID varchar(25) NOT NULL,
    CREATEDTIME datetime NOT NULL
    ) ENGINE=InnoDB;/*might want to use myisam here, might not*/

CREATE TABLE COMPANIES (
	COMPANY_ID INTEGER unsigned PRIMARY KEY,
	BUDGET FLOAT DEFAULT 0 NOT NULL,
	BILLING_ADDRESS VARCHAR(255) NOT NULL,
	COMPANY_NAME VARCHAR(255) NOT NULL,
	EMAIL VARCHAR(250) NOT NULL,/*EMAIL is used as the account name*/
	PHONE INTEGER unsigned NOT NULL,
	PASSWORD CHAR(128) NOT NULL,
	SALT CHAR(128) NOT NULL,
    VALIDATION_CODE CHAR(128) NOT NULL,
    VALIDATED BOOLEAN DEFAULT 0 NOT NULL
	) ENGINE=InnoDB;
	/*might still need stuff like address, state, zip code for billing
	but they don't have zip codes in Nigeria...*/

/* more information on phone?*/
CREATE TABLE APP_USERS (
	USER_ID INTEGER unsigned PRIMARY KEY,
	USER_LAT FLOAT NOT NULL,
	USER_LNG FLOAT NOT NULL,
	GENDER INTEGER unsigned NOT NULL,
	AGE INTEGER unsigned NOT NULL
	) ENGINE=InnoDB;

CREATE TABLE APP_USAGE (
    QUESTION_ID INTEGER unsigned PRIMARY KEY,
    QUESTION_COORD_ID INTEGER unsigned NOT NULL,
    TIMES_DISPLAYED INTEGER unsigned NOT NULL,/*times provided as option*/
    TIMES_ANSWERED INTEGER unsigned NOT NULL,/*number of times answered*/
    ANSWER_VIEWS INTEGER unsigned NOT NULL, /*views on other people's phones*/
    ANSWER_CLICKTHROUGHS INTEGER unsigned NOT NULL/*click through when viewed*/
    ) ENGINE=InnoDB;

CREATE TABLE LOGIN_ATTEMPTS (
    COMPANY_ID INTEGER unsigned PRIMARY KEY,
    TIME VARCHAR(30) NOT NULL
) ENGINE=InnoDB;

CREATE TABLE BANNED (
    EMAIL VARCHAR(250) PRIMARY KEY
) ENGINE=InnoDB;


CREATE INDEX QUESTION_COORDS_QUESTION_ID_INDEX ON QUESTION_COORDS (QUESTION_ID);

ALTER TABLE QUESTIONS ADD FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(COMPANY_ID); 

ALTER TABLE LOGIN_ATTEMPTS ADD FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(COMPANY_ID); 

ALTER TABLE QUESTION_COORDS ADD FOREIGN KEY (QUESTION_ID) REFERENCES QUESTIONS(QUESTION_ID); 

ALTER TABLE APP_USAGE ADD FOREIGN KEY (QUESTION_ID) REFERENCES QUESTIONS(QUESTION_ID); 

/*ALTER TABLE APP_USAGE ADD FOREIGN KEY (QUESTION_COORD_ID) REFERENCES QUESTION_COORDS(QUESTION__COORD_ID); */

/*ALTER TABLE QUESTIONS ADD COLUMN DELETED BIT(1) DEFAULT 0;*/

/*might be useful in feature but right now hard to implement and not sure if I'll need it...
would make things cleaner though..*/
/*ALTER TABLE QUESTION_COORDS ADD FOREIGN KEY (QUESTION_ID) REFERENCES QUESTIONS(QUESTION_ID); */
CREATE TABLE SEQ (
    NAME VARCHAR(30) PRIMARY KEY,
    CURRENT_VALUE INTEGER NOT NULL 
)ENGINE=InnoDB;

-- The use of LAST_INSERT_ID is a MySQL-specific trick to
-- eliminate the need for an explicit transaction here.

-- From: Zaitsev, Peter. "Stored function to generate sequences". MySQL
--   Performance Blog. Pleasanton, Calif.: Percona LLC, 2008 Apr 2.
--   URL: http://www.mysqlperformanceblog.com/2008/04/02/stored-function-to-generate-sequences/

delimiter //
CREATE FUNCTION NEXT_SEQ_VALUE(SEQ_NAME VARCHAR(30))
    RETURNS INT
    MODIFIES SQL DATA
BEGIN
    UPDATE SEQ
        SET
            CURRENT_VALUE = LAST_INSERT_ID(CURRENT_VALUE+1)
        WHERE NAME = SEQ_NAME;
    RETURN LAST_INSERT_ID();
END
//
delimiter ;


INSERT INTO SEQ SELECT 'QUESTIONS', MAX(QUESTION_ID) FROM QUESTIONS;
INSERT INTO SEQ SELECT 'QUESTION_COORDS', MAX(QUESTION_COORD_ID) FROM QUESTION_COORDS;
INSERT INTO SEQ SELECT 'COMPANIES', MAX(COMPANY_ID) FROM COMPANIES;
INSERT INTO SEQ SELECT 'APP_USERS', MAX(USER_ID) FROM APP_USERS;

INSERT INTO TARGET_GENDERS VALUES (0,'ALL');
INSERT INTO TARGET_GENDERS VALUES (1,'MALE');
INSERT INTO TARGET_GENDERS VALUES (2,'FEMALE');

INSERT INTO APP_USERS VALUES (0,20.0,-40,1,25);
INSERT INTO APP_USERS VALUES (1,50.5,40.40,0,27);

/*SET GLOBAL event_scheduler = ON;*/
/*Run once every day at a low usage time (start at 00:00)
#1 A select statement that grabs all question coord end dates
#2 a loop that checks if the end day is today
#3 if the end date is today, add it to a queue
#4 sort the queue
#5 every hour check the first item in the queue, if it matches, start deleting until one doesn't match
#6 done.*/
/*
CREATE EVENT findEndDates
    ON SCHEDULE EVERY 1 DAY
    STARTS CURRENT_DATE() + INTERVAL 1 HOUR
    DO
        SET @allEndDates = (SELECT * FROM QUESTION_COORDS WHERE END_DATE != none);
        
        SET @@global endDates = 
CREATE EVENT processEndDates
    ON SCHEDULE EVERY 1 HOUR
    STARTS CURRENT_DATE() + INTERVAL 1 HOUR 30 MINUTES
    DO
        UPDATE QUESTION_COORDS SET
        BUDGET = 0
        WHERE QUESTION_COORD_ID = @endDates
        */
