use poink;

/*possibly more efficient to split up into bids and questions?*/
/*have to prevent users from getting duplicate questions...keep track of all
question_id's they've seen and send it the server along with request for more ads
*/

CREATE TABLE QUESTIONS (
	QUESTION_ID INTEGER unsigned PRIMARY KEY,
	QUESTION VARCHAR(255) NOT NULL,
	MIN_AGE INTEGER unsigned NOT NULL,
	MAX_AGE INTEGER unsigned NOT NULL,
	COMPANY_ID INTEGER unsigned NOT NULL,
	BUDGET FLOAT NOT NULL,
	BID FLOAT NOT NULL,
	TARGET_GENDERS INTEGER unsigned NOT NULL
	)ENGINE=InnoDB;

CREATE TABLE TARGET_GENDERS (
	TARGET_GENDERS_ID INTEGER unsigned PRIMARY KEY,
	NAME VARCHAR(6)
	)ENGINE=InnoDB;

CREATE TABLE QUESTION_COORDS (
	QUESTION_COORD_ID INTEGER unsigned PRIMARY KEY,
	QUESTION_ID INTEGER unsigned NOT NULL,
	LAT FLOAT NOT NULL,
	LNG FLOAT NOT NULL,
	RADIUS FLOAT NOT NULL
	)ENGINE=InnoDB;

CREATE TABLE COMPANIES (
	COMPANY_ID INTEGER unsigned PRIMARY KEY,
	BUDGET FLOAT NULL,
	ACCOUNT_NAME VARCHAR(40) NOT NULL,
	BILLING_ADDRESS VARCHAR(255) NOT NULL,
	COMPANY_NAME VARCHAR(255) NOT NULL,
	EMAIL VARCHAR(250) NOT NULL,
	PHONE INTEGER unsigned,
	PASSWORD CHAR(128),
	SALT CHAR(128)
	) ENGINE=InnoDB;
	/*might still need stuff like address, state, zip code for billing
	but they don't have zip codes in Nigeria...*/

/* more information on phone?*/
CREATE TABLE APP_USERS (
	USER_ID INTEGER unsigned,
	USER_LAT FLOAT,
	USER_LNG FLOAT,
	GENDER INTEGER unsigned,
	AGE INTEGER unsigned
	) ENGINE=InnoDB;

CREATE TABLE LOGIN_ATTEMPTS (
    COMPANY_ID INTEGER NOT NULL, /*will want to change this to company_id*/
    TIME VARCHAR(30) NOT NULL
) ENGINE=InnoDB;

CREATE INDEX APP_USERS_USER_INDEX ON APP_USERS (USER_ID);

CREATE INDEX COMPANIES_COMPANY_ID_INDEX ON COMPANIES (COMPANY_ID);

CREATE INDEX QUESTION_COORDS_QUESTION_ID_INDEX ON QUESTION_COORDS (QUESTION_ID);

CREATE INDEX QUESTION_COORDS_QUESTION_COORD_ID_INDEX ON QUESTION_COORDS (QUESTION_COORD_ID);

CREATE INDEX QUESTIONS_QUESTION_ID_INDEX ON QUESTIONS (QUESTION_ID);

CREATE INDEX LOGIN_ATTEMPTS_COMPANY_ID_INDEX ON LOGIN_ATTEMPTS (COMPANY_ID);

ALTER TABLE QUESTIONS ADD FOREIGN KEY (COMPANY_ID) REFERENCES COMPANIES(COMPANY_ID); 

ALTER TABLE QUESTIONS ADD COLUMN DELETED BIT(1) DEFAULT 0;

/*might be useful in feature but right now hard to implement and not sure if I'll need it...
would make things cleaner though..*/
/*ALTER TABLE QUESTION_COORDS ADD FOREIGN KEY (QUESTION_ID) REFERENCES QUESTIONS(QUESTION_ID); */


CREATE TABLE SEQ (
    NAME VARCHAR(30) PRIMARY KEY,
    CURRENT_VALUE INTEGER NOT NULL )ENGINE=InnoDB;


-- The use of LAST_INSERT_ID is a MySQL-specific trick to
-- eliminate the need for an explicit transaction here.

-- From: Zaitsev, Peter. "Stored function to generate sequences". MySQL
--   Performance Blog. Pleasanton, Calif.: Percona LLC, 2008 Apr 2.
--   URL: http://www.mysqlperformanceblog.com/2008/04/02/stored-function-to-generate-sequences/

delimiter //
CREATE FUNCTION NEXT_SEQ_VALUE(SEQ_NAME VARCHAR(30))
    RETURNS INT
    MODIFIES SQL DATA
BEGIN
    UPDATE SEQ
        SET
            CURRENT_VALUE = LAST_INSERT_ID(CURRENT_VALUE+1)
        WHERE NAME = SEQ_NAME;
    RETURN LAST_INSERT_ID();
END
//
delimiter ;


INSERT INTO SEQ SELECT 'QUESTIONS', MAX(QUESTION_ID) FROM QUESTIONS;
INSERT INTO SEQ SELECT 'QUESTION_COORDS', MAX(QUESTION_COORD_ID) FROM QUESTION_COORDS;
INSERT INTO SEQ SELECT 'COMPANIES', MAX(COMPANY_ID) FROM COMPANIES;
INSERT INTO SEQ SELECT 'APP_USERS', MAX(USER_ID) FROM APP_USERS;

INSERT INTO TARGET_GENDERS VALUES (0,'ALL');
INSERT INTO TARGET_GENDERS VALUES (1,'MALE');
INSERT INTO TARGET_GENDERS VALUES (2,'FEMALE');

INSERT INTO APP_USERS VALUES (0,20.0,-40,1,25);
INSERT INTO APP_USERS VALUES (1,50.5,40.40,0,27);
